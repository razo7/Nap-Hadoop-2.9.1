<?xml version="1.0" encoding="UTF-8"?>

<!-- Generated by maven-plugin-tools 3.4 on 2019-01-08 -->

<plugin>
  <name>Apache Hadoop Maven Plugins</name>
  <description>Apache Hadoop Project POM</description>
  <groupId>org.apache.hadoop</groupId>
  <artifactId>hadoop-maven-plugins</artifactId>
  <version>2.9.1</version>
  <goalPrefix>hadoops</goalPrefix>
  <mojos>
    <mojo>
      <goal>cmake-compile</goal>
      <description>Goal which builds the native sources.</description>
      <requiresDirectInvocation>false</requiresDirectInvocation>
      <requiresProject>true</requiresProject>
      <requiresReports>false</requiresReports>
      <aggregator>false</aggregator>
      <requiresOnline>false</requiresOnline>
      <inheritedByDefault>true</inheritedByDefault>
      <phase>compile</phase>
      <implementation>org.apache.hadoop.maven.plugin.cmakebuilder.CompileMojo</implementation>
      <language>java</language>
      <instantiationStrategy>per-lookup</instantiationStrategy>
      <executionStrategy>once-per-session</executionStrategy>
      <threadSafe>false</threadSafe>
      <parameters>
        <parameter>
          <name>env</name>
          <type>java.util.Map</type>
          <required>false</required>
          <editable>true</editable>
          <description>Environment variables to pass to CMake. Note that it is usually better to use a CMake variable than an environment variable. To quote the CMake FAQ: &apos;One should avoid using environment variables for controlling the flow of CMake code (such as in IF commands). The build system generated by CMake may re-run CMake automatically when CMakeLists.txt files change. The environment in which this is executed is controlled by the build system and may not match that in which CMake was originally run. If you want to control build settings on the CMake command line, you need to use cache variables set with the -D option. The settings will be saved in CMakeCache.txt so that they don&apos;t have to be repeated every time CMake is run on the same build tree.&apos;</description>
        </parameter>
        <parameter>
          <name>output</name>
          <type>java.io.File</type>
          <required>false</required>
          <editable>true</editable>
          <description>Location of the build products.</description>
        </parameter>
        <parameter>
          <name>source</name>
          <type>java.io.File</type>
          <required>true</required>
          <editable>true</editable>
          <description>Location of the source files. This should be where the sources are checked in.</description>
        </parameter>
        <parameter>
          <name>target</name>
          <type>java.lang.String</type>
          <required>false</required>
          <editable>true</editable>
          <description>CMake build target.</description>
        </parameter>
        <parameter>
          <name>vars</name>
          <type>java.util.Map</type>
          <required>false</required>
          <editable>true</editable>
          <description>CMake cached variables to set.</description>
        </parameter>
      </parameters>
      <configuration>
        <output implementation="java.io.File" default-value="${project.build.directory}/native"/>
        <source implementation="java.io.File" default-value="${basedir}/src/main/native"/>
      </configuration>
    </mojo>
    <mojo>
      <goal>cmake-test</goal>
      <description>Goal which runs a native unit test.</description>
      <requiresDirectInvocation>false</requiresDirectInvocation>
      <requiresProject>true</requiresProject>
      <requiresReports>false</requiresReports>
      <aggregator>false</aggregator>
      <requiresOnline>false</requiresOnline>
      <inheritedByDefault>true</inheritedByDefault>
      <phase>test</phase>
      <implementation>org.apache.hadoop.maven.plugin.cmakebuilder.TestMojo</implementation>
      <language>java</language>
      <instantiationStrategy>per-lookup</instantiationStrategy>
      <executionStrategy>once-per-session</executionStrategy>
      <threadSafe>false</threadSafe>
      <parameters>
        <parameter>
          <name>args</name>
          <type>java.util.List</type>
          <required>false</required>
          <editable>true</editable>
          <description>Arguments to pass to the binary.</description>
        </parameter>
        <parameter>
          <name>binary</name>
          <type>java.io.File</type>
          <required>true</required>
          <editable>true</editable>
          <description>Location of the binary to run.</description>
        </parameter>
        <parameter>
          <name>env</name>
          <type>java.util.Map</type>
          <required>false</required>
          <editable>true</editable>
          <description>Environment variables to pass to the binary.</description>
        </parameter>
        <parameter>
          <name>expectedResult</name>
          <type>java.lang.String</type>
          <required>false</required>
          <editable>true</editable>
          <description>What result to expect from the test Can be either &apos;success&apos;, &apos;failure&apos;, or &apos;any&apos;.</description>
        </parameter>
        <parameter>
          <name>preconditions</name>
          <type>java.util.Map</type>
          <required>false</required>
          <editable>true</editable>
          <description>A list of preconditions which must be true for this test to be run.</description>
        </parameter>
        <parameter>
          <name>results</name>
          <type>java.io.File</type>
          <required>false</required>
          <editable>true</editable>
          <description>Path to results directory.</description>
        </parameter>
        <parameter>
          <name>skipIfMissing</name>
          <type>boolean</type>
          <required>false</required>
          <editable>true</editable>
          <description>If true, pass over the test without an error if the binary is missing.</description>
        </parameter>
        <parameter>
          <name>testName</name>
          <type>java.lang.String</type>
          <required>false</required>
          <editable>true</editable>
          <description>Name of this test. Defaults to the basename of the binary. So if your binary is /foo/bar/baz, this will default to &apos;baz.&apos;</description>
        </parameter>
        <parameter>
          <name>timeout</name>
          <type>int</type>
          <required>false</required>
          <editable>true</editable>
          <description>Number of seconds to wait before declaring the test failed.</description>
        </parameter>
        <parameter>
          <name>workingDirectory</name>
          <type>java.io.File</type>
          <required>false</required>
          <editable>true</editable>
          <description>The working directory to use.</description>
        </parameter>
      </parameters>
      <configuration>
        <expectedResult implementation="java.lang.String" default-value="success"/>
        <results implementation="java.io.File" default-value="native-results"/>
        <skipIfMissing implementation="boolean" default-value="false"/>
        <timeout implementation="int" default-value="600"/>
      </configuration>
    </mojo>
    <mojo>
      <goal>parallel-tests-createdir</goal>
      <description>Goal which creates the parallel-test directories.</description>
      <requiresDirectInvocation>false</requiresDirectInvocation>
      <requiresProject>true</requiresProject>
      <requiresReports>false</requiresReports>
      <aggregator>false</aggregator>
      <requiresOnline>false</requiresOnline>
      <inheritedByDefault>true</inheritedByDefault>
      <phase>generate-test-resources</phase>
      <implementation>org.apache.hadoop.maven.plugin.paralleltests.CreateDirsMojo</implementation>
      <language>java</language>
      <instantiationStrategy>per-lookup</instantiationStrategy>
      <executionStrategy>once-per-session</executionStrategy>
      <threadSafe>false</threadSafe>
      <parameters>
        <parameter>
          <name>hadoopTmpDir</name>
          <type>java.io.File</type>
          <required>false</required>
          <editable>true</editable>
          <description>Location of the test.build.data.</description>
        </parameter>
        <parameter>
          <name>testBuildData</name>
          <type>java.io.File</type>
          <required>false</required>
          <editable>true</editable>
          <description>Location of the test.build.data.</description>
        </parameter>
        <parameter>
          <name>testBuildDir</name>
          <type>java.io.File</type>
          <required>false</required>
          <editable>true</editable>
          <description>Location of the test.build.dir.</description>
        </parameter>
        <parameter>
          <name>testsThreadCount</name>
          <type>java.lang.String</type>
          <required>false</required>
          <editable>true</editable>
          <description>Thread count.</description>
        </parameter>
      </parameters>
      <configuration>
        <hadoopTmpDir implementation="java.io.File" default-value="${project.build.directory}/tmp"/>
        <testBuildData implementation="java.io.File" default-value="${project.build.directory}/test-dir"/>
        <testBuildDir implementation="java.io.File" default-value="${project.build.directory}/test-dir"/>
        <testsThreadCount implementation="java.lang.String" default-value="${testsThreadCount}"/>
      </configuration>
    </mojo>
    <mojo>
      <goal>protoc</goal>
      <description>Mojo to generate java classes from .proto files using protoc. See package info for examples of use in a maven pom.</description>
      <requiresDirectInvocation>false</requiresDirectInvocation>
      <requiresProject>true</requiresProject>
      <requiresReports>false</requiresReports>
      <aggregator>false</aggregator>
      <requiresOnline>false</requiresOnline>
      <inheritedByDefault>true</inheritedByDefault>
      <phase>generate-sources</phase>
      <implementation>org.apache.hadoop.maven.plugin.protoc.ProtocMojo</implementation>
      <language>java</language>
      <instantiationStrategy>per-lookup</instantiationStrategy>
      <executionStrategy>once-per-session</executionStrategy>
      <threadSafe>false</threadSafe>
      <parameters>
        <parameter>
          <name>checksumPath</name>
          <type>java.lang.String</type>
          <required>false</required>
          <editable>true</editable>
          <description></description>
        </parameter>
        <parameter>
          <name>imports</name>
          <type>java.io.File[]</type>
          <required>false</required>
          <editable>true</editable>
          <description></description>
        </parameter>
        <parameter>
          <name>output</name>
          <type>java.io.File</type>
          <required>false</required>
          <editable>true</editable>
          <description></description>
        </parameter>
        <parameter>
          <name>protocCommand</name>
          <type>java.lang.String</type>
          <required>false</required>
          <editable>true</editable>
          <description></description>
        </parameter>
        <parameter>
          <name>protocVersion</name>
          <type>java.lang.String</type>
          <required>true</required>
          <editable>true</editable>
          <description></description>
        </parameter>
        <parameter>
          <name>source</name>
          <type>org.apache.maven.model.FileSet</type>
          <required>true</required>
          <editable>true</editable>
          <description></description>
        </parameter>
      </parameters>
      <configuration>
        <checksumPath implementation="java.lang.String" default-value="${project.build.directory}/hadoop-maven-plugins-protoc-checksums.json"/>
        <output implementation="java.io.File" default-value="${project.build.directory}/generated-sources/java"/>
        <protocCommand implementation="java.lang.String" default-value="protoc"/>
      </configuration>
    </mojo>
    <mojo>
      <goal>test-protoc</goal>
      <description>Mojo to generate java test classes from .proto files using protoc. See package info for examples of use in a maven pom.</description>
      <requiresDirectInvocation>false</requiresDirectInvocation>
      <requiresProject>true</requiresProject>
      <requiresReports>false</requiresReports>
      <aggregator>false</aggregator>
      <requiresOnline>false</requiresOnline>
      <inheritedByDefault>true</inheritedByDefault>
      <phase>generate-test-sources</phase>
      <implementation>org.apache.hadoop.maven.plugin.protoc.ProtocTestMojo</implementation>
      <language>java</language>
      <instantiationStrategy>per-lookup</instantiationStrategy>
      <executionStrategy>once-per-session</executionStrategy>
      <threadSafe>false</threadSafe>
      <parameters>
        <parameter>
          <name>checksumPath</name>
          <type>java.lang.String</type>
          <required>false</required>
          <editable>true</editable>
          <description></description>
        </parameter>
        <parameter>
          <name>imports</name>
          <type>java.io.File[]</type>
          <required>false</required>
          <editable>true</editable>
          <description></description>
        </parameter>
        <parameter>
          <name>output</name>
          <type>java.io.File</type>
          <required>false</required>
          <editable>true</editable>
          <description></description>
        </parameter>
        <parameter>
          <name>protocCommand</name>
          <type>java.lang.String</type>
          <required>false</required>
          <editable>true</editable>
          <description></description>
        </parameter>
        <parameter>
          <name>protocVersion</name>
          <type>java.lang.String</type>
          <required>true</required>
          <editable>true</editable>
          <description></description>
        </parameter>
        <parameter>
          <name>source</name>
          <type>org.apache.maven.model.FileSet</type>
          <required>true</required>
          <editable>true</editable>
          <description></description>
        </parameter>
      </parameters>
      <configuration>
        <checksumPath implementation="java.lang.String" default-value="${project.build.directory}/hadoop-maven-plugins-protoc-checksums.json"/>
        <output implementation="java.io.File" default-value="${project.build.directory}/generated-test-sources/java"/>
        <protocCommand implementation="java.lang.String" default-value="protoc"/>
      </configuration>
    </mojo>
    <mojo>
      <goal>version-info</goal>
      <description>VersionInfoMojo calculates information about the current version of the codebase and exports the information as properties for further use in a Maven build. The version information includes build time, SCM URI, SCM branch, SCM commit, and an MD5 checksum of the contents of the files in the codebase.</description>
      <requiresDirectInvocation>false</requiresDirectInvocation>
      <requiresProject>true</requiresProject>
      <requiresReports>false</requiresReports>
      <aggregator>false</aggregator>
      <requiresOnline>false</requiresOnline>
      <inheritedByDefault>true</inheritedByDefault>
      <implementation>org.apache.hadoop.maven.plugin.versioninfo.VersionInfoMojo</implementation>
      <language>java</language>
      <instantiationStrategy>per-lookup</instantiationStrategy>
      <executionStrategy>once-per-session</executionStrategy>
      <threadSafe>false</threadSafe>
      <parameters>
        <parameter>
          <name>buildTimeProperty</name>
          <type>java.lang.String</type>
          <required>false</required>
          <editable>true</editable>
          <description></description>
        </parameter>
        <parameter>
          <name>gitCommand</name>
          <type>java.lang.String</type>
          <required>false</required>
          <editable>true</editable>
          <description></description>
        </parameter>
        <parameter>
          <name>md5Property</name>
          <type>java.lang.String</type>
          <required>false</required>
          <editable>true</editable>
          <description></description>
        </parameter>
        <parameter>
          <name>scmBranchProperty</name>
          <type>java.lang.String</type>
          <required>false</required>
          <editable>true</editable>
          <description></description>
        </parameter>
        <parameter>
          <name>scmCommitProperty</name>
          <type>java.lang.String</type>
          <required>false</required>
          <editable>true</editable>
          <description></description>
        </parameter>
        <parameter>
          <name>scmUriProperty</name>
          <type>java.lang.String</type>
          <required>false</required>
          <editable>true</editable>
          <description></description>
        </parameter>
        <parameter>
          <name>source</name>
          <type>org.apache.maven.model.FileSet</type>
          <required>true</required>
          <editable>true</editable>
          <description></description>
        </parameter>
      </parameters>
      <configuration>
        <buildTimeProperty implementation="java.lang.String" default-value="version-info.build.time"/>
        <gitCommand implementation="java.lang.String" default-value="git"/>
        <md5Property implementation="java.lang.String" default-value="version-info.source.md5"/>
        <scmBranchProperty implementation="java.lang.String" default-value="version-info.scm.branch"/>
        <scmCommitProperty implementation="java.lang.String" default-value="version-info.scm.commit"/>
        <scmUriProperty implementation="java.lang.String" default-value="version-info.scm.uri"/>
      </configuration>
    </mojo>
  </mojos>
</plugin>